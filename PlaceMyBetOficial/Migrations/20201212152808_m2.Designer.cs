// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlaceMyBetOficial.Models.objects;

namespace PlaceMyBetOficial.Migrations
{
    [DbContext(typeof(PlaceMyBetContext))]
    [Migration("20201212152808_m2")]
    partial class m2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("PlaceMyBetOficial.Models.objects.Apuesta", b =>
                {
                    b.Property<int>("ApuestaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Dinero")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MercadoId")
                        .HasColumnType("int");

                    b.Property<string>("TipoApuesta")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TipoMercado")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("ApuestaId");

                    b.HasIndex("MercadoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Apuestas");

                    b.HasData(
                        new
                        {
                            ApuestaId = 1,
                            Dinero = 50,
                            Fecha = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MercadoId = 1,
                            TipoApuesta = "under",
                            TipoMercado = "1.5",
                            UsuarioId = "jordigarcia@gmail.com"
                        });
                });

            modelBuilder.Entity("PlaceMyBetOficial.Models.objects.Cuenta", b =>
                {
                    b.Property<long>("CuentaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("NombreBanco")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Saldo")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("CuentaId");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Cuentas");

                    b.HasData(
                        new
                        {
                            CuentaId = 1234567876543212L,
                            NombreBanco = "bankia",
                            Saldo = 100,
                            UsuarioId = "jordigarcia@gmail.com"
                        });
                });

            modelBuilder.Entity("PlaceMyBetOficial.Models.objects.Evento", b =>
                {
                    b.Property<int>("EventoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Local")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Visitante")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("EventoId");

                    b.ToTable("Eventos");

                    b.HasData(
                        new
                        {
                            EventoId = 1,
                            Fecha = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Local = "madrid",
                            Visitante = "valencia"
                        });
                });

            modelBuilder.Entity("PlaceMyBetOficial.Models.objects.Mercado", b =>
                {
                    b.Property<int>("MercadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("CuotaOver")
                        .HasColumnType("double");

                    b.Property<double>("CuotaUnder")
                        .HasColumnType("double");

                    b.Property<double>("DineroOver")
                        .HasColumnType("double");

                    b.Property<double>("DineroUnder")
                        .HasColumnType("double");

                    b.Property<int>("EventoId")
                        .HasColumnType("int");

                    b.Property<string>("OverUnder")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("MercadoId");

                    b.HasIndex("EventoId");

                    b.ToTable("Mercados");

                    b.HasData(
                        new
                        {
                            MercadoId = 1,
                            CuotaOver = 3.7999999999999998,
                            CuotaUnder = 1.45,
                            DineroOver = 950.0,
                            DineroUnder = 300.0,
                            EventoId = 1,
                            OverUnder = "1.5"
                        });
                });

            modelBuilder.Entity("PlaceMyBetOficial.Models.objects.Usuario", b =>
                {
                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Apellidos")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Edad")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UsuarioId");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            UsuarioId = "jordigarcia@gmail.com",
                            Apellidos = "Garcia Ibor",
                            Edad = 39,
                            Nombre = "jordi"
                        });
                });

            modelBuilder.Entity("PlaceMyBetOficial.Models.objects.Apuesta", b =>
                {
                    b.HasOne("PlaceMyBetOficial.Models.objects.Mercado", "Mercados")
                        .WithMany("Apuestas")
                        .HasForeignKey("MercadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlaceMyBetOficial.Models.objects.Usuario", "Usuarios")
                        .WithMany("Apuestas")
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("PlaceMyBetOficial.Models.objects.Cuenta", b =>
                {
                    b.HasOne("PlaceMyBetOficial.Models.objects.Usuario", "Usuario")
                        .WithOne("Cuenta")
                        .HasForeignKey("PlaceMyBetOficial.Models.objects.Cuenta", "UsuarioId");
                });

            modelBuilder.Entity("PlaceMyBetOficial.Models.objects.Mercado", b =>
                {
                    b.HasOne("PlaceMyBetOficial.Models.objects.Evento", "eventos")
                        .WithMany("Mercados")
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
