// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlaceMyBetOficial.Models.objects;

namespace PlaceMyBetOficial.Migrations
{
    [DbContext(typeof(PlaceMyBetContext))]
    [Migration("20201130010113_m2")]
    partial class m2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("PlaceMyBetOficial.Models.objects.Apuesta", b =>
                {
                    b.Property<int>("ApuestaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("dinero")
                        .HasColumnType("int");

                    b.Property<DateTime>("fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("mercadoId")
                        .HasColumnType("int");

                    b.Property<string>("tipoApuesta")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("tipoMercado")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("usuarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("ApuestaId");

                    b.HasIndex("mercadoId");

                    b.HasIndex("usuarioId");

                    b.ToTable("Apuestas");

                    b.HasData(
                        new
                        {
                            ApuestaId = 1,
                            dinero = 50,
                            fecha = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            mercadoId = 0,
                            tipoApuesta = "under",
                            tipoMercado = "1.5"
                        });
                });

            modelBuilder.Entity("PlaceMyBetOficial.Models.objects.Cuenta", b =>
                {
                    b.Property<long>("cuentaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("nombreBanco")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("saldo")
                        .HasColumnType("int");

                    b.Property<string>("usuarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("cuentaId");

                    b.HasIndex("usuarioId")
                        .IsUnique();

                    b.ToTable("Cuentas");

                    b.HasData(
                        new
                        {
                            cuentaId = 1234567876543212L,
                            nombreBanco = "bankia",
                            saldo = 100,
                            usuarioId = "jordigarcia@gmail.com"
                        });
                });

            modelBuilder.Entity("PlaceMyBetOficial.Models.objects.Evento", b =>
                {
                    b.Property<int>("eventoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("MercadoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("local")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("visitante")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("eventoId");

                    b.HasIndex("MercadoId");

                    b.ToTable("Eventos");

                    b.HasData(
                        new
                        {
                            eventoId = 1,
                            fecha = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            local = "madrid",
                            visitante = "valencia"
                        });
                });

            modelBuilder.Entity("PlaceMyBetOficial.Models.objects.Mercado", b =>
                {
                    b.Property<int>("MercadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("cuotaOver")
                        .HasColumnType("double");

                    b.Property<double>("cuotaUnder")
                        .HasColumnType("double");

                    b.Property<double>("dineroOver")
                        .HasColumnType("double");

                    b.Property<double>("dineroUnder")
                        .HasColumnType("double");

                    b.Property<int>("eventoId")
                        .HasColumnType("int");

                    b.Property<string>("overUnder")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("MercadoId");

                    b.ToTable("Mercados");

                    b.HasData(
                        new
                        {
                            MercadoId = 1,
                            cuotaOver = 3.7999999999999998,
                            cuotaUnder = 1.45,
                            dineroOver = 950.0,
                            dineroUnder = 300.0,
                            eventoId = 1,
                            overUnder = "1.5"
                        });
                });

            modelBuilder.Entity("PlaceMyBetOficial.Models.objects.Usuario", b =>
                {
                    b.Property<string>("usuarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("apellidos")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("edad")
                        .HasColumnType("int");

                    b.Property<string>("nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("usuarioId");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            usuarioId = "jordigarcia@gmail.com",
                            apellidos = "Garcia Ibor",
                            edad = 39,
                            nombre = "jordi"
                        });
                });

            modelBuilder.Entity("PlaceMyBetOficial.Models.objects.Apuesta", b =>
                {
                    b.HasOne("PlaceMyBetOficial.Models.objects.Mercado", "Mercado")
                        .WithMany("apuestas")
                        .HasForeignKey("mercadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlaceMyBetOficial.Models.objects.Usuario", "Usuario")
                        .WithMany("apuestas")
                        .HasForeignKey("usuarioId");
                });

            modelBuilder.Entity("PlaceMyBetOficial.Models.objects.Cuenta", b =>
                {
                    b.HasOne("PlaceMyBetOficial.Models.objects.Usuario", "Usuario")
                        .WithOne("Cuenta")
                        .HasForeignKey("PlaceMyBetOficial.Models.objects.Cuenta", "usuarioId");
                });

            modelBuilder.Entity("PlaceMyBetOficial.Models.objects.Evento", b =>
                {
                    b.HasOne("PlaceMyBetOficial.Models.objects.Mercado", "Mercado")
                        .WithMany("eventos")
                        .HasForeignKey("MercadoId");
                });
#pragma warning restore 612, 618
        }
    }
}
